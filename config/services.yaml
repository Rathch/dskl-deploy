# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    app_locales: en|de
services:

    _instanceof:
        App\Doctrine\Type\AbstractEnumTyp:
            tags: [ 'app.doctrine_enum_type' ]
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    admin.team:
        class: App\Admin\TeamAdmin
        calls:
            - [ setTemplate, [ 'show', 'TeamAdmin/show.html.twig' ] ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\Team, controller: ~, manager_type: orm, group: admin, label: Team }

    admin.encounter:
        class: App\Admin\EncounterAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Encounter, controller: App\Controller\EncounterAdminController, manager_type: orm, group: admin, label: Encounter }

    admin.play_day:
        class: App\Admin\PlayDayAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\PlayDay, controller: App\Controller\PlayDayAdminController, manager_type: orm, group: admin, label: PlayDay }

    admin.team_info:
        class: App\Admin\TeamInfoAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\TeamInfo, controller: ~, manager_type: orm, group: admin, label: TeamInfo }

    admin.squad:
        class: App\Admin\SquadAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Squad, controller: ~, manager_type: orm, group: admin, label: Squad }
    admin.league:
        class: App\Admin\LeagueAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\League, controller: ~, manager_type: orm, group: admin, label: League }

    admin.team_attributes:
        class: App\Admin\TeamAttributesAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\TeamAttributes, controller: ~, manager_type: orm, group: admin, label: TeamAttributes }

    app.menu_builder:
        class: App\Menu\Builder
        arguments: [ "@knp_menu.factory" ]

    app.main_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: [ "@app.menu_builder", createMainMenu ]
        arguments: [ "@request_stack" ]
        tags:
            - { name: knp_menu.menu, alias: main } # The alias is what is used to retrieve the menu
    app.team_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: [ "@app.menu_builder", createTeamMenu ]
        arguments: [ "@request_stack" ]
        tags:
            - { name: knp_menu.menu, alias: team } # The alias is what is used to retrieve the menu

    app.footer:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: [ "@app.menu_builder", createFooterMenu ]
        arguments: [ "@request_stack" ]
        tags:
            - { name: knp_menu.menu, alias: footer } # The alias is what is used to retrieve the menu

    admin.page:
        class: App\Admin\PageAdmin
        calls:
            - [ setTemplate, [ 'edit', 'PageAdmin/edit.html.twig' ] ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\Page, controller: ~, manager_type: orm, group: admin, label: Page }
